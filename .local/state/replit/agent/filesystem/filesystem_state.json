{"file_contents":{"DEPLOYMENT.md":{"content":"# P.K. Koduri Portfolio Website - Self-Hosting Deployment Guide\n\n## Overview\n\nThis guide will help you deploy P.K. Koduri's portfolio website on your own server. The application is a full-stack React/Node.js application with Express backend.\n\n## Prerequisites\n\n- Node.js 18+ installed on your server\n- npm or yarn package manager\n- A domain name (optional but recommended)\n- SSL certificate (recommended for production)\n\n## Server Requirements\n\n- **RAM**: Minimum 1GB, recommended 2GB+\n- **Storage**: 2GB+ available space\n- **Network**: Port 80 and 443 (for SSL) accessible\n- **OS**: Linux (Ubuntu/Debian recommended), macOS, or Windows Server\n\n## Quick Deployment Steps\n\n### 1. Clone/Upload Your Project\n\nUpload your project files to your server. You can use:\n- Git clone (if using version control)\n- SCP/SFTP file transfer\n- FTP upload\n\n### 2. Install Dependencies\n\n```bash\ncd your-project-directory\nnpm install\n```\n\n### 3. Build the Application\n\n```bash\nnpm run build\n```\n\nThis creates:\n- `dist/public/` - Built frontend assets\n- `dist/index.js` - Built backend server\n\n### 4. Set Environment Variables\n\nCreate a `.env` file in your project root:\n\n```bash\n# Server Configuration\nNODE_ENV=production\nPORT=5000\n\n# Optional: If using external database\n# DATABASE_URL=your_database_url_here\n```\n\n### 5. Start the Application\n\n```bash\nnpm start\n```\n\nThe application will be available at `http://your-server-ip:5000`\n\n## Production Deployment Options\n\n### Option 1: Direct Server Deployment\n\n1. **Install Node.js on your server**:\n   ```bash\n   # Ubuntu/Debian\n   curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\n   sudo apt-get install -y nodejs\n   \n   # CentOS/RHEL\n   curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -\n   sudo yum install -y nodejs\n   ```\n\n2. **Create a system user** (recommended):\n   ```bash\n   sudo useradd -m -s /bin/bash portfolio\n   sudo su - portfolio\n   ```\n\n3. **Upload and build your application**:\n   ```bash\n   # Upload files to /home/portfolio/app\n   cd /home/portfolio/app\n   npm install\n   npm run build\n   ```\n\n4. **Create a systemd service** (recommended for auto-restart):\n   ```bash\n   sudo nano /etc/systemd/system/portfolio.service\n   ```\n\n   Add this content:\n   ```ini\n   [Unit]\n   Description=P.K. Koduri Portfolio Website\n   After=network.target\n\n   [Service]\n   Type=simple\n   User=portfolio\n   WorkingDirectory=/home/portfolio/app\n   ExecStart=/usr/bin/node dist/index.js\n   Restart=on-failure\n   Environment=NODE_ENV=production\n   Environment=PORT=5000\n\n   [Install]\n   WantedBy=multi-user.target\n   ```\n\n5. **Start and enable the service**:\n   ```bash\n   sudo systemctl daemon-reload\n   sudo systemctl enable portfolio\n   sudo systemctl start portfolio\n   ```\n\n### Option 2: Docker Deployment\n\nCreate a `Dockerfile`:\n\n```dockerfile\nFROM node:20-alpine\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy source code\nCOPY . .\n\n# Build application\nRUN npm run build\n\n# Expose port\nEXPOSE 5000\n\n# Start application\nCMD [\"npm\", \"start\"]\n```\n\nBuild and run:\n```bash\ndocker build -t pk-portfolio .\ndocker run -d -p 5000:5000 --name portfolio pk-portfolio\n```\n\n### Option 3: Nginx Reverse Proxy (Recommended)\n\n1. **Install Nginx**:\n   ```bash\n   sudo apt update\n   sudo apt install nginx\n   ```\n\n2. **Create Nginx configuration**:\n   ```bash\n   sudo nano /etc/nginx/sites-available/portfolio\n   ```\n\n   Add this content:\n   ```nginx\n   server {\n       listen 80;\n       server_name your-domain.com www.your-domain.com;\n\n       location / {\n           proxy_pass http://localhost:5000;\n           proxy_http_version 1.1;\n           proxy_set_header Upgrade $http_upgrade;\n           proxy_set_header Connection 'upgrade';\n           proxy_set_header Host $host;\n           proxy_set_header X-Real-IP $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n           proxy_set_header X-Forwarded-Proto $scheme;\n           proxy_cache_bypass $http_upgrade;\n       }\n   }\n   ```\n\n3. **Enable the site**:\n   ```bash\n   sudo ln -s /etc/nginx/sites-available/portfolio /etc/nginx/sites-enabled/\n   sudo nginx -t\n   sudo systemctl restart nginx\n   ```\n\n## SSL Certificate Setup (Recommended)\n\n### Using Let's Encrypt (Free SSL)\n\n1. **Install Certbot**:\n   ```bash\n   sudo apt install certbot python3-certbot-nginx\n   ```\n\n2. **Get SSL certificate**:\n   ```bash\n   sudo certbot --nginx -d your-domain.com -d www.your-domain.com\n   ```\n\n3. **Auto-renewal** (Certbot usually sets this up automatically):\n   ```bash\n   sudo crontab -e\n   # Add this line:\n   0 12 * * * /usr/bin/certbot renew --quiet\n   ```\n\n## Database Configuration (Optional)\n\nThe application uses in-memory storage by default. For production with persistent data:\n\n1. **Set up PostgreSQL**:\n   ```bash\n   sudo apt install postgresql postgresql-contrib\n   sudo -u postgres createdb portfolio_db\n   sudo -u postgres createuser portfolio_user\n   ```\n\n2. **Update environment variables**:\n   ```bash\n   DATABASE_URL=postgresql://portfolio_user:password@localhost:5432/portfolio_db\n   ```\n\n3. **Run migrations**:\n   ```bash\n   npm run db:push\n   ```\n\n## Security Considerations\n\n1. **Firewall Configuration**:\n   ```bash\n   sudo ufw allow ssh\n   sudo ufw allow 'Nginx Full'\n   sudo ufw enable\n   ```\n\n2. **Regular Updates**:\n   ```bash\n   sudo apt update && sudo apt upgrade\n   npm audit fix\n   ```\n\n3. **Environment Variables**: Never commit sensitive data to version control\n\n4. **Process Manager**: Use PM2 or systemd for process management\n\n## Monitoring and Maintenance\n\n### Using PM2 (Alternative to systemd)\n\n1. **Install PM2**:\n   ```bash\n   npm install -g pm2\n   ```\n\n2. **Start application**:\n   ```bash\n   pm2 start dist/index.js --name portfolio\n   pm2 startup\n   pm2 save\n   ```\n\n3. **Monitor**:\n   ```bash\n   pm2 status\n   pm2 logs portfolio\n   ```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Port already in use**:\n   ```bash\n   sudo lsof -i :5000\n   sudo kill -9 <PID>\n   ```\n\n2. **Permission denied**:\n   ```bash\n   sudo chown -R portfolio:portfolio /home/portfolio/app\n   ```\n\n3. **Build failures**:\n   ```bash\n   rm -rf node_modules package-lock.json\n   npm cache clean --force\n   npm install\n   ```\n\n### Log Files\n\n- Application logs: `pm2 logs` or `journalctl -u portfolio`\n- Nginx logs: `/var/log/nginx/error.log`\n- System logs: `journalctl -xe`\n\n## Performance Optimization\n\n1. **Enable gzip compression** in Nginx\n2. **Set up CDN** for static assets\n3. **Database optimization** if using PostgreSQL\n4. **Caching headers** for static content\n\n## Backup Strategy\n\n1. **Application files**: Regular backups of your project directory\n2. **Database**: `pg_dump` if using PostgreSQL\n3. **SSL certificates**: Backup `/etc/letsencrypt/`\n\n## Support\n\nFor deployment issues specific to this application, check:\n- Application logs for error messages\n- Ensure all environment variables are set correctly\n- Verify Node.js version compatibility (18+)\n- Check network connectivity and firewall settings\n\n---\n\nThis deployment guide provides multiple options for hosting P.K. Koduri's portfolio website on your own infrastructure. Choose the method that best fits your technical requirements and server setup.","size_bytes":7236},"PKODURI-DEPLOYMENT.md":{"content":"# P.K. Koduri Portfolio - Production Deployment Guide\n## Customized for Ubuntu + Nginx + PM2 + pkoduri.com\n\nThis guide is specifically tailored for your server configuration:\n- Ubuntu Linux\n- Nginx with React/Node optimization\n- Let's Encrypt SSL for pkoduri.com\n- Node.js v20.19.4\n- PM2 process manager\n\n## Quick Deployment Steps\n\n### 1. Upload Files to Server\n\nUpload your project files to your server. Recommended location: `/var/www/pkoduri.com`\n\n```bash\n# Create directory (if not exists)\nsudo mkdir -p /var/www/pkoduri.com\nsudo chown $USER:$USER /var/www/pkoduri.com\n\n# Upload files (using scp, rsync, or git)\nscp -r ./* user@your-server:/var/www/pkoduri.com/\n```\n\n### 2. Run Automated Deployment\n\nThe `deploy-pkoduri.sh` script handles everything:\n\n```bash\ncd /var/www/pkoduri.com\nsudo ./deploy-pkoduri.sh\n```\n\nThis script will:\n- ✅ Install dependencies and build the application\n- ✅ Configure PM2 with the provided ecosystem.config.js\n- ✅ Set up nginx configuration for pkoduri.com\n- ✅ Configure log rotation\n- ✅ Perform health checks\n\n### 3. Manual Steps (if needed)\n\nIf you prefer manual deployment:\n\n```bash\n# 1. Install and build\nnpm ci --only=production\nnpm run build\n\n# 2. Start with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup systemd\n\n# 3. Configure nginx\nsudo cp pkoduri-nginx.conf /etc/nginx/sites-available/pkoduri.com\nsudo ln -s /etc/nginx/sites-available/pkoduri.com /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n```\n\n## Nginx Configuration Details\n\nThe provided `pkoduri-nginx.conf` includes:\n- **SSL/HTTPS**: Configured for your Let's Encrypt certificates\n- **HTTP to HTTPS redirect**: All HTTP traffic redirected to HTTPS\n- **Static file caching**: 1-year cache for assets, 1-hour for HTML\n- **API rate limiting**: 10 requests/second for API endpoints\n- **Security headers**: HSTS, CSP, X-Frame-Options, etc.\n- **Gzip compression**: Optimized for your existing setup\n- **React Router support**: Fallback handling for client-side routing\n\n## PM2 Configuration\n\nThe `ecosystem.config.js` provides:\n- **Single instance**: Appropriate for portfolio site traffic\n- **Auto-restart**: Restarts on crashes with limits\n- **Log management**: Structured logging to `/var/log/pm2/`\n- **Memory limits**: 512MB memory restart threshold\n- **Health monitoring**: Grace periods and restart conditions\n\n## SSL Certificate Management\n\nYour Let's Encrypt certificates are automatically configured:\n```bash\n# Check certificate status\nsudo certbot certificates\n\n# Renew certificates (auto-renewal should be configured)\nsudo certbot renew\n\n# Test auto-renewal\nsudo certbot renew --dry-run\n```\n\n## Monitoring and Maintenance\n\n### PM2 Commands\n```bash\npm2 status                    # Check application status\npm2 logs pkoduri-portfolio   # View logs\npm2 restart pkoduri-portfolio # Restart app\npm2 monit                    # Real-time monitoring\npm2 reload pkoduri-portfolio # Zero-downtime reload\n```\n\n### Nginx Commands\n```bash\nsudo nginx -t               # Test configuration\nsudo systemctl reload nginx # Reload configuration\nsudo systemctl status nginx # Check nginx status\ntail -f /var/log/nginx/access.log # Monitor access logs\n```\n\n### System Monitoring\n```bash\n# Check application response\ncurl -I https://pkoduri.com\n\n# Monitor system resources\nhtop\ndf -h\nfree -h\n\n# Check SSL certificate\nopenssl x509 -in /etc/letsencrypt/live/pkoduri.com/cert.pem -text -noout\n```\n\n## Updating the Application\n\nFor future updates:\n\n```bash\n# 1. Upload new files\ncd /var/www/pkoduri.com\n\n# 2. Install dependencies (if package.json changed)\nnpm ci --only=production\n\n# 3. Build new version\nnpm run build\n\n# 4. Restart application\npm2 restart pkoduri-portfolio\n\n# 5. Clear nginx cache (if needed)\nsudo nginx -s reload\n```\n\n## Security Considerations\n\nThe configuration includes:\n- ✅ **HTTPS enforcement** with HSTS headers\n- ✅ **Rate limiting** to prevent abuse\n- ✅ **Security headers** for XSS and clickjacking protection\n- ✅ **File access restrictions** for sensitive files\n- ✅ **Non-root process execution** via PM2\n- ✅ **Log rotation** to prevent disk space issues\n\n## Troubleshooting\n\n### Application Not Starting\n```bash\n# Check PM2 logs\npm2 logs pkoduri-portfolio\n\n# Check if port 5000 is available\nsudo lsof -i :5000\n\n# Restart PM2 daemon\npm2 kill\npm2 resurrect\n```\n\n### Nginx Issues\n```bash\n# Test configuration\nsudo nginx -t\n\n# Check nginx logs\nsudo tail -f /var/log/nginx/error.log\n\n# Verify SSL certificates\nsudo certbot certificates\n```\n\n### SSL Certificate Issues\n```bash\n# Renew certificates\nsudo certbot renew --nginx\n\n# Check certificate expiry\nopenssl x509 -in /etc/letsencrypt/live/pkoduri.com/cert.pem -noout -dates\n```\n\n## Performance Optimization\n\nYour configuration already includes:\n- **Static file caching** with proper expires headers\n- **Gzip compression** for text-based assets\n- **HTTP/2 support** for faster loading\n- **Keep-alive connections** for reduced latency\n- **Optimized SSL configuration** for performance\n\n## Backup Strategy\n\nRecommended backup locations:\n- **Application files**: `/var/www/pkoduri.com`\n- **Nginx configuration**: `/etc/nginx/sites-available/pkoduri.com`\n- **SSL certificates**: `/etc/letsencrypt/`\n- **PM2 configuration**: `~/.pm2/`\n- **Application logs**: `/var/log/pm2/`\n\n## Contact Form Data\n\nThe application uses in-memory storage by default. For persistent contact form data, consider setting up PostgreSQL and updating the environment variables:\n\n```bash\n# Install PostgreSQL\nsudo apt install postgresql postgresql-contrib\n\n# Create database and user\nsudo -u postgres createdb pkoduri_portfolio\nsudo -u postgres createuser pkoduri_user\n\n# Update .env file\necho \"DATABASE_URL=postgresql://pkoduri_user:password@localhost:5432/pkoduri_portfolio\" >> .env\n\n# Restart application\npm2 restart pkoduri-portfolio\n```\n\n---\n\nYour P.K. Koduri portfolio website is now optimized for your specific server configuration and ready for production deployment at https://pkoduri.com!","size_bytes":5975},"deploy-pkoduri.sh":{"content":"#!/bin/bash\n\n# P.K. Koduri Portfolio Website - Production Deployment Script\n# Customized for Ubuntu server with nginx, PM2, and pkoduri.com domain\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nDOMAIN=\"pkoduri.com\"\nAPP_NAME=\"pkoduri-portfolio\"\nAPP_DIR=\"/var/www/pkoduri.com\"\nNGINX_CONFIG=\"/etc/nginx/sites-available/pkoduri.com\"\nUSER=\"www-data\" # Change this to your preferred user\n\nprint_status() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_header() {\n    echo -e \"${BLUE}================================${NC}\"\n    echo -e \"${BLUE}$1${NC}\"\n    echo -e \"${BLUE}================================${NC}\"\n}\n\nprint_header \"P.K. Koduri Portfolio Deployment\"\necho \"Domain: $DOMAIN\"\necho \"App Directory: $APP_DIR\"\necho \"\"\n\n# Check if running as root or with sudo\nif [[ $EUID -ne 0 ]]; then\n   print_error \"This script must be run as root or with sudo\"\n   exit 1\nfi\n\n# Verify Node.js and npm versions\nprint_status \"Checking system requirements...\"\nif ! command -v node &> /dev/null; then\n    print_error \"Node.js not found. Please install Node.js 20+\"\n    exit 1\nfi\n\nNODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\nif [ \"$NODE_VERSION\" -lt 20 ]; then\n    print_error \"Node.js 20+ required. Current: $(node -v)\"\n    exit 1\nfi\n\nif ! command -v pm2 &> /dev/null; then\n    print_error \"PM2 not found. Installing PM2...\"\n    npm install -g pm2\nfi\n\nprint_status \"Node.js: $(node -v) ✓\"\nprint_status \"npm: $(npm -v) ✓\"\nprint_status \"PM2: $(pm2 -v) ✓\"\n\n# Create application directory\nprint_status \"Setting up application directory...\"\nmkdir -p $APP_DIR\ncd $APP_DIR\n\n# Check if this is an update or fresh install\nif [ -f \"package.json\" ]; then\n    print_status \"Existing installation detected. Performing update...\"\n    \n    # Stop existing PM2 process\n    if pm2 list | grep -q $APP_NAME; then\n        print_status \"Stopping existing application...\"\n        pm2 stop $APP_NAME\n    fi\n    \n    # Backup current version\n    if [ -d \"dist\" ]; then\n        print_status \"Backing up current version...\"\n        mv dist dist.backup.$(date +%Y%m%d_%H%M%S)\n    fi\nelse\n    print_status \"Fresh installation detected...\"\nfi\n\n# Copy application files (assumes you've uploaded them to a temp directory)\nprint_status \"Copying application files...\"\n# You would typically copy from your source directory here\n# cp -r /path/to/your/source/* $APP_DIR/\n\n# Set proper ownership\nchown -R $USER:$USER $APP_DIR\n\n# Install dependencies and build\nprint_status \"Installing dependencies...\"\nsudo -u $USER npm ci --only=production\n\nprint_status \"Building application...\"\nsudo -u $USER npm run build\n\n# Verify build\nif [ ! -d \"dist\" ]; then\n    print_error \"Build failed! dist directory not found.\"\n    exit 1\nfi\n\nprint_status \"Build completed successfully!\"\n\n# Set up environment file\nif [ ! -f \".env\" ]; then\n    print_status \"Creating production environment file...\"\n    cat > .env << EOF\nNODE_ENV=production\nPORT=5000\nEOF\n    chown $USER:$USER .env\n    chmod 600 .env\nfi\n\n# Create PM2 log directory\nmkdir -p /var/log/pm2\nchown $USER:$USER /var/log/pm2\n\n# Update PM2 ecosystem config with correct path\nprint_status \"Configuring PM2...\"\nsed -i \"s|cwd: '/var/www/pkoduri.com'|cwd: '$APP_DIR'|g\" ecosystem.config.js\n\n# Start/restart application with PM2\nprint_status \"Starting application with PM2...\"\nsudo -u $USER pm2 start ecosystem.config.js\n\n# Save PM2 configuration\nsudo -u $USER pm2 save\n\n# Set up PM2 startup script\nprint_status \"Setting up PM2 startup script...\"\nsudo -u $USER pm2 startup systemd -u $USER --hp /home/$USER\n# Note: You'll need to run the command that PM2 outputs\n\n# Configure nginx\nprint_status \"Configuring nginx...\"\nif [ ! -f \"$NGINX_CONFIG\" ]; then\n    cp pkoduri-nginx.conf $NGINX_CONFIG\n    \n    # Enable the site\n    ln -sf $NGINX_CONFIG /etc/nginx/sites-enabled/\n    \n    # Test nginx configuration\n    nginx -t\n    \n    if [ $? -eq 0 ]; then\n        print_status \"Nginx configuration is valid\"\n        systemctl reload nginx\n    else\n        print_error \"Nginx configuration error!\"\n        exit 1\n    fi\nelse\n    print_warning \"Nginx configuration already exists. Please review manually.\"\nfi\n\n# Verify Let's Encrypt certificates\nprint_status \"Checking SSL certificates...\"\nif [ -f \"/etc/letsencrypt/live/$DOMAIN/fullchain.pem\" ]; then\n    print_status \"SSL certificates found ✓\"\nelse\n    print_warning \"SSL certificates not found. Run: certbot --nginx -d $DOMAIN -d www.$DOMAIN\"\nfi\n\n# Set up log rotation\nprint_status \"Setting up log rotation...\"\ncat > /etc/logrotate.d/pkoduri-portfolio << EOF\n/var/log/pm2/pkoduri-portfolio*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 $USER $USER\n    postrotate\n        sudo -u $USER pm2 reloadLogs\n    endscript\n}\nEOF\n\n# Final status check\nprint_status \"Performing health checks...\"\nsleep 5\n\n# Check PM2 status\nif sudo -u $USER pm2 list | grep -q $APP_NAME; then\n    APP_STATUS=$(sudo -u $USER pm2 jlist | jq -r \".[] | select(.name==\\\"$APP_NAME\\\") | .pm2_env.status\")\n    if [ \"$APP_STATUS\" = \"online\" ]; then\n        print_status \"Application is running ✓\"\n    else\n        print_error \"Application status: $APP_STATUS\"\n    fi\nelse\n    print_error \"Application not found in PM2\"\nfi\n\n# Check nginx status\nif systemctl is-active --quiet nginx; then\n    print_status \"Nginx is running ✓\"\nelse\n    print_error \"Nginx is not running\"\nfi\n\n# Test application response\nprint_status \"Testing application response...\"\nif curl -f -s http://localhost:5000/ > /dev/null; then\n    print_status \"Application responding on port 5000 ✓\"\nelse\n    print_warning \"Application not responding on port 5000\"\nfi\n\nprint_header \"Deployment Summary\"\necho \"Application: $APP_NAME\"\necho \"Directory: $APP_DIR\"\necho \"Domain: $DOMAIN\"\necho \"Status: $(sudo -u $USER pm2 jlist | jq -r \\\".[] | select(.name==\\\\\\\"$APP_NAME\\\\\\\") | .pm2_env.status\\\")\"\necho \"\"\necho \"Useful commands:\"\necho \"  pm2 status              - Check application status\"\necho \"  pm2 logs $APP_NAME      - View application logs\"\necho \"  pm2 restart $APP_NAME   - Restart application\"\necho \"  pm2 monit              - Monitor application\"\necho \"  nginx -t               - Test nginx configuration\"\necho \"  systemctl reload nginx - Reload nginx\"\necho \"\"\n\nif [ -f \"/etc/letsencrypt/live/$DOMAIN/fullchain.pem\" ]; then\n    echo \"🎉 Deployment completed successfully!\"\n    echo \"Your portfolio is available at: https://$DOMAIN\"\nelse\n    echo \"⚠️  Deployment completed, but SSL setup is needed:\"\n    echo \"Run: sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN\"\n    echo \"Then visit: https://$DOMAIN\"\nfi","size_bytes":6761},"deploy.sh":{"content":"#!/bin/bash\n\n# P.K. Koduri Portfolio Website - Deployment Script\n# This script automates the deployment process for self-hosting\n\nset -e\n\necho \"🚀 Starting deployment of P.K. Koduri Portfolio Website...\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    print_error \"Node.js is not installed. Please install Node.js 18+ first.\"\n    exit 1\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\nif [ \"$NODE_VERSION\" -lt 18 ]; then\n    print_error \"Node.js version 18+ required. Current version: $(node -v)\"\n    exit 1\nfi\n\nprint_status \"Node.js version: $(node -v) ✓\"\n\n# Check if npm is available\nif ! command -v npm &> /dev/null; then\n    print_error \"npm is not installed.\"\n    exit 1\nfi\n\n# Create .env file if it doesn't exist\nif [ ! -f .env ]; then\n    print_status \"Creating .env file...\"\n    cat > .env << EOF\nNODE_ENV=production\nPORT=5000\nEOF\n    print_warning \"Please review and update the .env file with your specific configuration.\"\nfi\n\n# Install dependencies\nprint_status \"Installing dependencies...\"\nnpm ci --only=production\n\n# Build the application\nprint_status \"Building the application...\"\nnpm run build\n\n# Check if build was successful\nif [ ! -d \"dist\" ]; then\n    print_error \"Build failed! dist directory not found.\"\n    exit 1\nfi\n\nprint_status \"Build completed successfully!\"\n\n# Create systemd service file (optional)\nread -p \"Would you like to create a systemd service for auto-start? (y/n): \" create_service\n\nif [ \"$create_service\" = \"y\" ] || [ \"$create_service\" = \"Y\" ]; then\n    read -p \"Enter the username to run the service as (default: current user): \" service_user\n    service_user=${service_user:-$(whoami)}\n    \n    CURRENT_DIR=$(pwd)\n    \n    cat > portfolio.service << EOF\n[Unit]\nDescription=P.K. Koduri Portfolio Website\nAfter=network.target\n\n[Service]\nType=simple\nUser=$service_user\nWorkingDirectory=$CURRENT_DIR\nExecStart=/usr/bin/node dist/index.js\nRestart=on-failure\nEnvironment=NODE_ENV=production\nEnvironment=PORT=5000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    print_status \"Systemd service file created: portfolio.service\"\n    print_warning \"To install the service, run:\"\n    echo \"  sudo cp portfolio.service /etc/systemd/system/\"\n    echo \"  sudo systemctl daemon-reload\"\n    echo \"  sudo systemctl enable portfolio\"\n    echo \"  sudo systemctl start portfolio\"\nfi\n\n# Check if PM2 is available for process management\nif command -v pm2 &> /dev/null; then\n    read -p \"Would you like to start the application with PM2? (y/n): \" use_pm2\n    \n    if [ \"$use_pm2\" = \"y\" ] || [ \"$use_pm2\" = \"Y\" ]; then\n        print_status \"Starting application with PM2...\"\n        pm2 start dist/index.js --name portfolio\n        pm2 save\n        print_status \"Application started with PM2!\"\n        echo \"\"\n        echo \"PM2 commands:\"\n        echo \"  pm2 status          - Check application status\"\n        echo \"  pm2 logs portfolio  - View logs\"\n        echo \"  pm2 restart portfolio - Restart application\"\n        echo \"  pm2 stop portfolio  - Stop application\"\n    fi\nelse\n    print_warning \"PM2 not found. You can install it with: npm install -g pm2\"\n    read -p \"Would you like to start the application directly? (y/n): \" start_direct\n    \n    if [ \"$start_direct\" = \"y\" ] || [ \"$start_direct\" = \"Y\" ]; then\n        print_status \"Starting application...\"\n        nohup npm start > application.log 2>&1 &\n        echo $! > app.pid\n        print_status \"Application started! PID: $(cat app.pid)\"\n        print_warning \"Logs are being written to: application.log\"\n        print_warning \"To stop the application: kill $(cat app.pid)\"\n    fi\nfi\n\necho \"\"\nprint_status \"Deployment completed successfully! 🎉\"\necho \"\"\necho \"Next steps:\"\necho \"1. Configure your web server (nginx/apache) as a reverse proxy\"\necho \"2. Set up SSL certificate (recommended: Let's Encrypt)\"\necho \"3. Configure your domain DNS to point to this server\"\necho \"4. Test the application at http://your-server-ip:5000\"\necho \"\"\necho \"For detailed instructions, see DEPLOYMENT.md\"","size_bytes":4344},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"ecosystem.config.js":{"content":"// PM2 ecosystem configuration for P.K. Koduri Portfolio\n// Run with: pm2 start ecosystem.config.js\n\nmodule.exports = {\n  apps: [{\n    name: 'pkoduri-portfolio',\n    script: './dist/index.js',\n    cwd: '/var/www/pkoduri.com', // Update this path to your deployment directory\n    \n    // Environment variables\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000,\n    },\n    \n    // Process management\n    instances: 1, // Single instance since it's a portfolio site\n    exec_mode: 'fork', // Use fork mode for single instance\n    \n    // Auto-restart configuration\n    autorestart: true,\n    watch: false, // Don't watch files in production\n    max_memory_restart: '512M',\n    \n    // Logging\n    log_file: '/var/log/pm2/pkoduri-portfolio.log',\n    out_file: '/var/log/pm2/pkoduri-portfolio-out.log',\n    error_file: '/var/log/pm2/pkoduri-portfolio-error.log',\n    log_date_format: 'YYYY-MM-DD HH:mm:ss Z',\n    \n    // Advanced PM2 features\n    listen_timeout: 10000,\n    kill_timeout: 5000,\n    \n    // Health monitoring\n    health_check_grace_period: 10000,\n    \n    // Process restart conditions\n    min_uptime: '10s',\n    max_restarts: 10,\n    \n    // Environment-specific settings\n    env_production: {\n      NODE_ENV: 'production',\n      PORT: 5000,\n    }\n  }]\n};","size_bytes":1274},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"production-checklist.md":{"content":"# P.K. Koduri Portfolio - Production Deployment Checklist\n\n## Pre-Deployment Checklist\n\n### Server Requirements ✅\n- [x] Ubuntu Linux server\n- [x] Node.js v20.19.4 (latest LTS)\n- [x] npm v11.5.2 (latest)\n- [x] PM2 process manager installed\n- [x] Nginx configured and running\n- [x] UFW firewall (ports 22, 80, 443 open)\n- [x] Let's Encrypt SSL for pkoduri.com\n\n### Domain Configuration ✅\n- [x] pkoduri.com DNS pointing to server\n- [x] www.pkoduri.com DNS pointing to server\n- [x] SSL certificates installed and valid\n\n## Deployment Steps\n\n### 1. Upload Files to Server\n```bash\n# Create deployment directory\nsudo mkdir -p /var/www/pkoduri.com\nsudo chown $USER:$USER /var/www/pkoduri.com\n\n# Upload all project files\nscp -r ./* user@your-server:/var/www/pkoduri.com/\n```\n\n### 2. Run Automated Deployment\n```bash\ncd /var/www/pkoduri.com\nsudo ./deploy-pkoduri.sh\n```\n\n### 3. Verify Deployment\n```bash\n# Check PM2 status\npm2 status\n\n# Check nginx status\nsudo systemctl status nginx\n\n# Test application response\ncurl -I https://pkoduri.com\n\n# Check SSL certificate\nopenssl s_client -connect pkoduri.com:443 -servername pkoduri.com\n```\n\n## Post-Deployment Verification\n\n### Application Health\n- [ ] PM2 shows \"online\" status for pkoduri-portfolio\n- [ ] Application responds on port 5000\n- [ ] All pages load correctly\n- [ ] Contact form functionality works\n- [ ] Resume download works\n- [ ] Theme switching works between Professional and Innovation Catalyst\n\n### Web Server\n- [ ] Nginx configuration valid (`sudo nginx -t`)\n- [ ] HTTPS redirect working (http:// -> https://)\n- [ ] SSL certificate valid and trusted\n- [ ] Security headers present in response\n- [ ] Static files loading with proper caching headers\n\n### Performance\n- [ ] Page load times under 3 seconds\n- [ ] Lighthouse score > 90 for Performance\n- [ ] Images optimized and loading quickly\n- [ ] Gzip compression working for text assets\n\n### SEO and Accessibility\n- [ ] Meta descriptions present on all pages\n- [ ] Proper heading structure (h1, h2, h3)\n- [ ] Alt text on images\n- [ ] Mobile responsiveness verified\n- [ ] Social media preview working (Open Graph tags)\n\n## Monitoring Setup\n\n### Log Monitoring\n```bash\n# PM2 application logs\npm2 logs pkoduri-portfolio\n\n# Nginx access logs\nsudo tail -f /var/log/nginx/access.log\n\n# Nginx error logs\nsudo tail -f /var/log/nginx/error.log\n\n# System logs\njournalctl -f\n```\n\n### Performance Monitoring\n```bash\n# Real-time PM2 monitoring\npm2 monit\n\n# System resources\nhtop\ndf -h\nfree -h\n\n# Network connections\nss -tuln\n```\n\n## Maintenance Commands\n\n### Application Management\n```bash\n# Restart application\npm2 restart pkoduri-portfolio\n\n# View application status\npm2 status\n\n# View detailed info\npm2 show pkoduri-portfolio\n\n# Save PM2 configuration\npm2 save\n```\n\n### Nginx Management\n```bash\n# Test configuration\nsudo nginx -t\n\n# Reload configuration\nsudo systemctl reload nginx\n\n# Restart nginx\nsudo systemctl restart nginx\n```\n\n### SSL Certificate Management\n```bash\n# Check certificate status\nsudo certbot certificates\n\n# Test auto-renewal\nsudo certbot renew --dry-run\n\n# Manual renewal (if needed)\nsudo certbot renew --nginx\n```\n\n## Backup Procedures\n\n### Before Major Updates\n```bash\n# Backup application directory\nsudo tar -czf /backup/pkoduri-$(date +%Y%m%d).tar.gz /var/www/pkoduri.com\n\n# Backup nginx configuration\nsudo cp /etc/nginx/sites-available/pkoduri.com /backup/nginx-pkoduri-$(date +%Y%m%d).conf\n\n# Backup SSL certificates\nsudo tar -czf /backup/ssl-$(date +%Y%m%d).tar.gz /etc/letsencrypt\n```\n\n## Troubleshooting Guide\n\n### Application Issues\n```bash\n# If application won't start\npm2 logs pkoduri-portfolio --lines 50\npm2 restart pkoduri-portfolio\n\n# If port 5000 is busy\nsudo lsof -i :5000\nsudo kill -9 <PID>\n\n# If build fails\nrm -rf node_modules package-lock.json\nnpm cache clean --force\nnpm install\nnpm run build\n```\n\n### SSL Issues\n```bash\n# If SSL certificate expired\nsudo certbot renew --nginx\n\n# If certificate chain issues\nsudo certbot certificates\nsudo nginx -t\n```\n\n### Performance Issues\n```bash\n# Check system resources\ntop\ndf -h\nfree -h\n\n# Check application memory usage\npm2 monit\n\n# Restart if high memory usage\npm2 restart pkoduri-portfolio\n```\n\n## Security Checklist\n\n- [x] HTTPS enforced with HSTS headers\n- [x] Security headers configured (CSP, X-Frame-Options, etc.)\n- [x] Rate limiting enabled for API endpoints\n- [x] Firewall configured (UFW)\n- [x] Non-root user for application process\n- [x] Log rotation configured\n- [x] SSL certificate auto-renewal enabled\n\n## Success Criteria\n\n✅ **Portfolio is live at https://pkoduri.com**\n✅ **All functionality working correctly**\n✅ **SSL certificate valid and trusted**\n✅ **Performance optimized for fast loading**\n✅ **Monitoring and logging in place**\n✅ **Automated restart on failure**\n✅ **Security best practices implemented**\n\n---\n\n## Emergency Contacts\n\n- Server Provider: [Your hosting provider support]\n- Domain Registrar: [Your domain registrar support]\n- SSL Certificate: Let's Encrypt (automatic renewal)\n\n## Next Steps After Deployment\n\n1. Set up monitoring alerts (optional)\n2. Configure automated backups\n3. Set up analytics (Google Analytics, etc.)\n4. Submit to search engines for indexing\n5. Monitor performance and optimize as needed\n\nYour P.K. Koduri portfolio website is ready for production deployment!","size_bytes":5317},"replit.md":{"content":"# P.K. Koduri Portfolio Website\n\n## Overview\n\nThis is a choice-driven portfolio website for P.K. Koduri, a medical device marketing professional. The application presents visitors with two distinct narrative paths - \"Clinical Excellence\" (professional theme) and \"Innovation Catalyst\" (disruptor theme) - allowing them to experience the portfolio through their preferred lens. Built as a full-stack React application with a Node.js/Express backend, it features a modern UI design system, contact form functionality, and resume download capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Modern component-based architecture using functional components and hooks\n- **Vite Build System**: Fast development server and optimized production builds\n- **Routing**: Wouter for lightweight client-side routing with custom state management for theme switching\n- **State Management**: React's built-in state management with Context API for theme provider\n- **UI Framework**: shadcn/ui component library built on Radix UI primitives with Tailwind CSS styling\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Data Fetching**: TanStack Query for server state management and API interactions\n\n### Styling and Design System\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Theme System**: Dual-theme architecture supporting \"professional\" (blue) and \"disruptor\" (dark/pink) variants\n- **Design Tokens**: CSS custom properties for consistent color schemes, typography, and spacing\n- **Component Library**: Comprehensive UI component system with variants and consistent styling patterns\n\n### Backend Architecture\n- **Express.js Server**: RESTful API with middleware for logging, error handling, and request parsing\n- **Storage Layer**: Abstract storage interface with in-memory implementation (MemStorage)\n- **API Endpoints**: Contact form submission, contact retrieval, and resume download functionality\n- **Development Integration**: Vite middleware integration for seamless development experience\n\n### Data Layer\n- **Database Schema**: Drizzle ORM with PostgreSQL schema definitions for users and contacts\n- **Type Safety**: Full type safety from database to frontend using Drizzle's type inference\n- **Validation**: Zod schemas for runtime validation of API requests and form data\n- **Database Configuration**: Configured for PostgreSQL with Neon database integration\n\n### Build and Development\n- **Development Mode**: Hot module replacement with Vite dev server integration\n- **Production Build**: Client-side assets built with Vite, server bundled with esbuild\n- **TypeScript Configuration**: Strict type checking with path mapping for clean imports\n- **Asset Handling**: Static asset serving with proper caching headers\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18 with functional components, React Hook Form, TanStack Query\n- **Build Tools**: Vite for frontend bundling, esbuild for server bundling, TypeScript compiler\n- **UI Libraries**: Radix UI primitives, Lucide React icons, class-variance-authority for component variants\n\n### Database and ORM\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL dialect\n- **Neon Database**: Serverless PostgreSQL provider via @neondatabase/serverless\n- **Database Migration**: Drizzle Kit for schema management and migrations\n\n### Styling and Design\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n- **CSS Processing**: Autoprefixer for browser compatibility\n- **Font Integration**: Google Fonts (Inter, DM Sans, Geist Mono) for typography\n\n### Development Tools\n- **Replit Integration**: Replit-specific plugins for development environment integration\n- **Session Management**: connect-pg-simple for PostgreSQL session storage\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Utility Libraries**: clsx and tailwind-merge for conditional class composition\n\n## Deployment Configuration\n\n### Self-Hosting Readiness\nThe application is fully configured for deployment on any server infrastructure:\n\n- **Production Build**: Optimized builds with `npm run build` creating client assets in `dist/public/` and server bundle in `dist/index.js`\n- **Docker Support**: Complete Dockerfile and docker-compose.yml for containerized deployment\n- **Nginx Configuration**: Production-ready reverse proxy configuration with SSL, gzip compression, and security headers\n- **Process Management**: Systemd service files and PM2 configuration for production process management\n- **Environment Configuration**: Production environment variables and configuration management\n- **Deployment Automation**: Shell script (`deploy.sh`) for automated deployment process\n\n### Deployment Options\n1. **Direct Server Deployment**: Traditional server setup with Node.js, systemd service, and nginx reverse proxy\n2. **Docker Deployment**: Containerized deployment with Docker and docker-compose\n3. **Nginx Reverse Proxy**: Production-grade web server configuration with SSL termination\n4. **Process Management**: Multiple options including systemd, PM2, and Docker for application lifecycle management\n\n### Security Features\n- SSL/TLS configuration with modern cipher suites\n- Security headers (X-Frame-Options, CSP, etc.)\n- Rate limiting and request throttling\n- Non-root container user for Docker deployments\n- Environment variable security practices\n\n## Production Deployment Status\n\n### Deployment Ready for pkoduri.com\nThe portfolio website is fully prepared for production deployment on Ubuntu server infrastructure:\n\n- **Custom Configuration Files**: nginx config for pkoduri.com domain with Let's Encrypt SSL integration\n- **Process Management**: PM2 ecosystem configuration optimized for Node.js v20.19.4\n- **Automated Deployment**: Complete deployment script (`deploy-pkoduri.sh`) for one-command setup\n- **Monitoring Setup**: Structured logging, health checks, and performance monitoring\n- **Security Implementation**: HTTPS enforcement, rate limiting, security headers, and firewall configuration\n- **Maintenance Documentation**: Comprehensive guides for updates, troubleshooting, and monitoring\n\n### Production Features Implemented\n- **Performance Optimization**: Static file caching (1-year assets, 1-hour HTML), gzip compression, HTTP/2\n- **Security Hardening**: HSTS headers, CSP, rate limiting (10 req/s API, 50 req/s static), SSL/TLS best practices  \n- **Reliability**: Auto-restart on failure, memory limits, health monitoring, log rotation\n- **Scalability**: Optimized for portfolio traffic patterns with appropriate resource allocation\n\nThe website is ready for immediate deployment to https://pkoduri.com with professional-grade infrastructure.","size_bytes":6854},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        professional: {\n          50: \"var(--professional-50)\",\n          100: \"var(--professional-100)\",\n          500: \"var(--professional-500)\",\n          600: \"var(--professional-600)\",\n          700: \"var(--professional-700)\",\n          900: \"var(--professional-900)\",\n        },\n        disruptor: {\n          50: \"var(--disruptor-50)\",\n          100: \"var(--disruptor-100)\",\n          500: \"var(--disruptor-500)\",\n          600: \"var(--disruptor-600)\",\n          700: \"var(--disruptor-700)\",\n          900: \"var(--disruptor-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        slideUp: {\n          from: { transform: \"translateY(30px)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        pulseSubtle: {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.8\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.6s ease-in-out\",\n        \"slide-up\": \"slideUp 0.8s ease-out\",\n        \"pulse-subtle\": \"pulseSubtle 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3858},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Contact form submission\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      res.json({ success: true, id: contact.id });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          error: \"Invalid form data\",\n          details: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          error: \"Failed to submit contact form\" \n        });\n      }\n    }\n  });\n\n  // Get all contacts (for admin purposes)\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: \"Failed to retrieve contacts\" \n      });\n    }\n  });\n\n  // Download resume endpoint\n  app.get(\"/api/resume\", (req, res) => {\n    // In a real implementation, this would serve the actual PDF file\n    res.json({ \n      success: true, \n      downloadUrl: \"/assets/PK_Koduri_Resume.pdf\",\n      message: \"Resume download initiated\" \n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":1583},"server/storage.ts":{"content":"import { type User, type InsertUser, type Contact, type InsertContact } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  getContacts(): Promise<Contact[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contacts: Map<string, Contact>;\n\n  constructor() {\n    this.users = new Map();\n    this.contacts = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { \n      ...insertContact, \n      id, \n      createdAt: new Date() \n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1493},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\n","size_bytes":1171},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"./components/theme-provider\";\nimport Home from \"./pages/home\";\nimport Portfolio from \"./pages/portfolio\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [showPortfolio, setShowPortfolio] = useState(false);\n\n  const handleThemeSelection = (theme: \"professional\" | \"disruptor\") => {\n    setShowPortfolio(true);\n  };\n\n  const handleBackToHome = () => {\n    setShowPortfolio(false);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {!showPortfolio ? (\n        <Home onThemeSelection={handleThemeSelection} />\n      ) : (\n        <Portfolio onBackToHome={handleBackToHome} />\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"professional\" storageKey=\"pk-portfolio-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1288},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  \n  /* Custom theme colors */\n  --professional-50: hsl(214.3 100% 96.9%);\n  --professional-100: hsl(213.8 96.6% 91.8%);\n  --professional-500: hsl(217.2 91.2% 59.8%);\n  --professional-600: hsl(221.2 83.2% 53.3%);\n  --professional-700: hsl(224.3 76.3% 48%);\n  --professional-900: hsl(224 71.4% 4.1%);\n  \n  --disruptor-50: hsl(327.3 73.3% 97.1%);\n  --disruptor-100: hsl(326.5 77.8% 94.1%);\n  --disruptor-500: hsl(330.4 81.2% 60.4%);\n  --disruptor-600: hsl(333.3 71.4% 50.6%);\n  --disruptor-700: hsl(335.1 77.6% 42%);\n  --disruptor-900: hsl(343.1 87.7% 15.7%);\n\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n}\n\n.dark {\n  --background: hsl(0 0% 3.9%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(0 0% 3.9%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(0 0% 3.9%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(0 0% 98%);\n  --primary-foreground: hsl(0 0% 9%);\n  --secondary: hsl(0 0% 14.9%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(0 0% 14.9%);\n  --muted-foreground: hsl(0 0% 63.9%);\n  --accent: hsl(0 0% 14.9%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(0 0% 14.9%);\n  --input: hsl(0 0% 14.9%);\n  --ring: hsl(0 0% 83.1%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .theme-transition {\n    transition: all 0.5s ease-in-out;\n  }\n  \n  .card-hover {\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  .professional {\n    --primary: var(--professional-600);\n    --primary-foreground: hsl(0 0% 100%);\n    --accent: var(--professional-100);\n    --accent-foreground: var(--professional-600);\n  }\n\n  .disruptor {\n    --primary: var(--disruptor-600);\n    --primary-foreground: hsl(0 0% 100%);\n    --accent: var(--disruptor-100);\n    --accent-foreground: var(--disruptor-600);\n    --background: hsl(222.2 84% 4.9%);\n    --foreground: hsl(210 40% 98%);\n    --card: hsl(222.2 84% 4.9%);\n    --card-foreground: hsl(210 40% 98%);\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n\n  @keyframes slideUp {\n    from { transform: translateY(30px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n  }\n\n  @keyframes pulseSubtle {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.8; }\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.8s ease-out;\n  }\n\n  .animate-pulse-subtle {\n    animation: pulseSubtle 2s infinite;\n  }\n}\n","size_bytes":4647},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/about-section.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { GraduationCap, Briefcase, Award, Globe } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function AboutSection() {\n  const { theme } = useTheme();\n  const highlights = [\n    {\n      icon: GraduationCap,\n      title: \"Education\",\n      description: \"MBA Marketing & Strategy, Indiana University Kelley School\"\n    },\n    {\n      icon: Briefcase,\n      title: \"Experience\", \n      description: \"Cook Medical, Lexmark International, Multiple Startups\"\n    },\n    {\n      icon: Award,\n      title: \"Expertise\",\n      description: \"Product Launch, Strategic Marketing, Global Expansion\"\n    },\n    {\n      icon: Globe,\n      title: \"Impact\",\n      description: \"Worldwide patient outcomes improvement\"\n    }\n  ];\n\n  return (\n    <section className=\"py-20 theme-transition\" id=\"about\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-6\" data-testid=\"about-title\">\n            About P.K. Koduri\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"about-subtitle\">\n            {theme === 'professional' \n              ? \"A methodical leader focused on patient outcomes, with 15+ years systematically bringing breakthrough medical technologies to patients who need them most.\"\n              : \"A process improvement leader who streamlines organizational efficiency, with 15+ years modernizing medical innovation practices in established healthcare organizations.\"\n            }\n          </p>\n        </div>\n        \n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"prose prose-lg text-muted-foreground max-w-none\" data-testid=\"about-content\">\n            {theme === 'professional' ? (\n              <>\n                <p className=\"mb-6\">\n                  My career centers on ensuring breakthrough medical technologies reach every patient who needs them. From launching the first FDA-approved fenestrated endograft to managing $250M+ portfolios, I focus on systematic execution that delivers 95.5% clinical success rates.\n                </p>\n                <p className=\"mb-6\">\n                  My approach combines rigorous clinical training—from OR support to physician education programs—with strategic marketing expertise gained through my MBA from Indiana University's Kelley School of Business.\n                </p>\n                <p>\n                  Whether developing Advanced Clinical Specialist programs, creating 2-day physician workshops for FDA compliance, or building global market strategies, every initiative serves one goal: improving patient outcomes through proven medical device adoption.\n                </p>\n              </>\n            ) : (\n              <>\n                <p className=\"mb-6\">\n                  I modernize processes that slow medical innovation. While traditional planning cycles take 90 days, I've streamlined development timelines to 5 days using design sprint methodologies adapted from technology industry best practices.\n                </p>\n                <p className=\"mb-6\">\n                  My dual-role appointments across MedSurg and Vascular divisions improve cross-functional collaboration. I've helped teams transition from traditional processes to more efficient workflows that maintain regulatory compliance while accelerating delivery.\n                </p>\n                <p>\n                  From launching products ahead of schedule to coordinating marketing functions across four separate business units, I create operational advantages through improved efficiency while preserving the clinical excellence patients deserve.\n                </p>\n              </>\n            )}\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-6\">\n            {highlights.map((highlight, index) => {\n              const IconComponent = highlight.icon;\n              return (\n                <Card key={index} className=\"card-hover\" data-testid={`highlight-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center mb-4\">\n                      <IconComponent className=\"text-accent-foreground\" size={20} />\n                    </div>\n                    <h4 className=\"font-semibold text-foreground mb-2\">{highlight.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{highlight.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4768},"client/src/components/achievements-timeline.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function AchievementsTimeline() {\n  const { theme } = useTheme();\n  const achievements = theme === 'professional' ? [\n    {\n      period: \"2010-2011\",\n      title: \"Clinical Foundation Building\",\n      description: \"Started as Clinical Specialist conducting in-service training for OR and office staff in vascular surgery departments. Provided technical support in OR, assisted surgeons in planning procedures, and represented Cook Medical at regional conferences.\",\n      tags: [\"Clinical Training\", \"OR Support\", \"Medical Education\"]\n    },\n    {\n      period: \"2011-2014\", \n      title: \"Zenith Fenestrated FDA Success\",\n      description: \"Successfully launched the first FDA-approved fenestrated abdominal endograft in the US as Product Manager. Met all post-launch objectives including revenue and market share targets for FY2013. Developed Advanced Clinical Specialist program and 2-day physician workshops for FDA compliance.\",\n      tags: [\"FDA Launch\", \"Clinical Programs\", \"Patient Outcomes\"]\n    },\n    {\n      period: \"2014-2016\",\n      title: \"Strategic Healthcare Planning\", \n      description: \"As Manager of Strategic Projects, developed health economics framework for global product development. Created seal zone education campaigns and conducted cardiothoracic specialty due diligence to expand patient access to life-saving technologies.\",\n      tags: [\"Health Economics\", \"Patient Access\", \"Strategic Planning\"]\n    },\n    {\n      period: \"2017-2018\",\n      title: \"$250M+ Patient Impact Portfolio\",\n      description: \"Owned global marketing mix for $250+ Million portfolio of life-saving endografts. Achieved high single-digit market share growth, directly expanding patient access to critical vascular interventions worldwide.\",\n      tags: [\"Patient Impact\", \"Global Reach\", \"Clinical Success\"]\n    },\n    {\n      period: \"2021-Present\",\n      title: \"Dual-Division Patient Impact Leadership\",\n      description: \"Unique joint appointment across MedSurg and Vascular Divisions created in partnership with Cook leadership. Led comprehensive patient-focused initiatives including TeslaTome ERCP go-to-market strategy development, NEST-VT reproductive health improvements, and Account Integration program ensuring unified patient care approach.\",\n      tags: [\"Patient-Centered Care\", \"Cross-Division Leadership\", \"Integrated Patient Solutions\"]\n    }\n  ] : [\n    {\n      period: \"2008-2010\",\n      title: \"Startup Disruption Experience\",\n      description: \"Developed SaaS product GatherWare to harness collective intelligence, successfully implementing for 150+ engineers at global manufacturing company. Improved production efficiency and enabled new product development through innovation management.\",\n      tags: [\"SaaS Innovation\", \"Process Disruption\", \"Efficiency Gains\"]\n    },\n    {\n      period: \"2010-2014\",\n      title: \"Breaking Traditional Launch Models\",\n      description: \"Shattered conventional medical device launch timelines by pioneering the first FDA-approved fenestrated endograft launch. Disrupted standard training models with intensive 2-day workshops that compressed months of education into accelerated programs.\",\n      tags: [\"Launch Disruption\", \"Training Revolution\", \"Speed Innovation\"]\n    },\n    {\n      period: \"2014-2018\", \n      title: \"Portfolio Dominance Strategy\",\n      description: \"Owned marketing strategy development for $250M+ endograft portfolio, achieving high single-digit market share growth against entrenched competitors. Pioneered market disruption tactics that positioned organization ahead of traditional device manufacturers.\",\n      tags: [\"Portfolio Strategy\", \"Market Disruption\", \"Competitive Leadership\"]\n    },\n    {\n      period: \"2018-2020\",\n      title: \"Strategic Future Planning Leadership\",\n      description: \"Led horizon-scanning project analyzing industry trends to develop future healthcare scenarios. Created strategic playbooks with recommendations for AI, robotics, and additive manufacturing partnerships—positioning organization ahead of technological advancement.\",\n      tags: [\"Future Planning\", \"Tech Integration\", \"Strategic Advantage\"]\n    },\n    {\n      period: \"2023-Present\", \n      title: \"AI Innovation Leadership & Digital Transformation\",\n      description: \"Pioneer in enterprise AI adoption, earning Digital Frontier Award (November 2024) for spearheading Microsoft 365 Copilot integration across marketing. Leading contributor and strategic leader in Marketing Generative AI Workgroup, shaping organizational AI approach. Developed custom AI assistant 'Emma' for personalized marketing content. Finalist in LoopTech CEO Innovation Challenge.\",\n      tags: [\"AI Leadership\", \"Digital Transformation\", \"Innovation Awards\"]\n    }\n  ];\n\n  return (\n    <section className=\"py-20 bg-muted/50 theme-transition\" id=\"achievements\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-6\" data-testid=\"achievements-title\">\n            {theme === 'professional' ? 'Career Journey: Patient-Focused Milestones' : 'Disruption Timeline: Organizational Breakthroughs'}\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"achievements-subtitle\">\n            {theme === 'professional' \n              ? \"A systematic progression through medical device marketing, with each role building deeper expertise in bringing life-saving technologies to patients worldwide.\"\n              : \"A track record of organizational disruption, consistently breaking traditional models to accelerate medical innovation while maintaining regulatory excellence.\"\n            }\n          </p>\n        </div>\n\n        <div className=\"relative\">\n          {/* Timeline line */}\n          <div className=\"absolute left-4 md:left-1/2 transform md:-translate-x-1/2 h-full w-1 bg-border\"></div>\n          \n          {achievements.map((achievement, index) => (\n            <div key={index} className=\"relative flex items-center mb-12\" data-testid={`achievement-${index}`}>\n              {/* Timeline dot */}\n              <div className=\"hidden md:block absolute left-1/2 transform -translate-x-1/2 w-4 h-4 bg-primary rounded-full border-4 border-background shadow-lg\"></div>\n              <div className=\"md:hidden absolute left-4 transform -translate-x-1/2 w-4 h-4 bg-primary rounded-full border-4 border-background shadow-lg\"></div>\n              \n              {/* Content */}\n              <div className={`ml-12 md:ml-0 ${index % 2 === 0 ? 'md:w-1/2 md:pr-8' : 'md:w-1/2 md:pl-8 md:ml-auto'}`}>\n                <Card className=\"card-hover\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center mb-4\">\n                      <Badge variant=\"secondary\" className=\"bg-accent text-accent-foreground\">\n                        {achievement.period}\n                      </Badge>\n                    </div>\n                    <h3 className=\"text-xl font-bold text-foreground mb-3\">\n                      {achievement.title}\n                    </h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      {achievement.description}\n                    </p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {achievement.tags.map((tag, tagIndex) => (\n                        <Badge key={tagIndex} variant=\"outline\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7921},"client/src/components/contact-section.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Mail, Phone, MapPin, Linkedin, Github, Twitter } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst contactSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  company: z.string().optional(),\n  message: z.string().min(10, \"Please enter a message with at least 10 characters\")\n});\n\ntype ContactForm = z.infer<typeof contactSchema>;\n\nexport function ContactSection() {\n  const { toast } = useToast();\n  \n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors }\n  } = useForm<ContactForm>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      company: \"\",\n      message: \"\"\n    }\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactForm) => {\n      const response = await apiRequest(\"POST\", \"/api/contact\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"Thank you for your message. I'll get back to you within 24 hours.\"\n      });\n      reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error sending message\",\n        description: error.message || \"Please try again later.\"\n      });\n    }\n  });\n\n  const onSubmit = (data: ContactForm) => {\n    contactMutation.mutate(data);\n  };\n\n  const contactInfo = [\n    {\n      icon: Mail,\n      label: \"Email\",\n      value: \"pkoduri@gmail.com\",\n      href: \"mailto:pkoduri@gmail.com\"\n    },\n    {\n      icon: Phone,\n      label: \"Phone\", \n      value: \"(812) 606-0365\",\n      href: \"tel:+18126060365\"\n    },\n    {\n      icon: MapPin,\n      label: \"Location\",\n      value: \"Bloomington, IN\",\n      href: null\n    }\n  ];\n\n  const socialLinks = [\n    { icon: Linkedin, href: \"#\", color: \"bg-blue-600 hover:bg-blue-700\" },\n    { icon: Github, href: \"#\", color: \"bg-gray-800 hover:bg-gray-900\" },\n    { icon: Twitter, href: \"#\", color: \"bg-blue-400 hover:bg-blue-500\" }\n  ];\n\n  const quickFacts = [\n    { label: \"Response Time:\", value: \"Within 24 hours\" },\n    { label: \"Availability:\", value: \"Immediate\" },\n    { label: \"Preferred Contact:\", value: \"Email\" }\n  ];\n\n  return (\n    <section className=\"py-20 theme-transition\" id=\"contact\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-6\" data-testid=\"contact-title\">\n            Let's Connect\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"contact-subtitle\">\n            Ready to discuss how strategic marketing expertise can drive your medical device innovation forward?\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-bold text-foreground mb-6\" data-testid=\"contact-form-title\">\n                Send a Message\n              </h3>\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input \n                      id=\"firstName\"\n                      {...register(\"firstName\")}\n                      placeholder=\"John\"\n                      data-testid=\"input-first-name\"\n                    />\n                    {errors.firstName && (\n                      <p className=\"text-sm text-destructive mt-1\">{errors.firstName.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input \n                      id=\"lastName\"\n                      {...register(\"lastName\")}\n                      placeholder=\"Doe\"\n                      data-testid=\"input-last-name\"\n                    />\n                    {errors.lastName && (\n                      <p className=\"text-sm text-destructive mt-1\">{errors.lastName.message}</p>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input \n                    id=\"email\"\n                    type=\"email\"\n                    {...register(\"email\")}\n                    placeholder=\"john@company.com\"\n                    data-testid=\"input-email\"\n                  />\n                  {errors.email && (\n                    <p className=\"text-sm text-destructive mt-1\">{errors.email.message}</p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"company\">Company</Label>\n                  <Input \n                    id=\"company\"\n                    {...register(\"company\")}\n                    placeholder=\"Medical Device Company\"\n                    data-testid=\"input-company\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea \n                    id=\"message\"\n                    {...register(\"message\")}\n                    rows={4}\n                    placeholder=\"Tell me about your project or opportunity...\"\n                    data-testid=\"input-message\"\n                  />\n                  {errors.message && (\n                    <p className=\"text-sm text-destructive mt-1\">{errors.message.message}</p>\n                  )}\n                </div>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full font-medium\"\n                  disabled={contactMutation.isPending}\n                  data-testid=\"submit-contact-form\"\n                >\n                  {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Info */}\n          <div className=\"space-y-8\">\n            <div>\n              <h3 className=\"text-2xl font-bold text-foreground mb-6\" data-testid=\"contact-info-title\">\n                Get in Touch\n              </h3>\n              <div className=\"space-y-4\">\n                {contactInfo.map((info, index) => {\n                  const IconComponent = info.icon;\n                  const content = (\n                    <div className=\"flex items-center\" data-testid={`contact-info-${index}`}>\n                      <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center mr-4\">\n                        <IconComponent className=\"text-accent-foreground\" size={20} />\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-foreground\">{info.label}</div>\n                        <div className=\"text-muted-foreground\">{info.value}</div>\n                      </div>\n                    </div>\n                  );\n                  \n                  return info.href ? (\n                    <a key={index} href={info.href} className=\"block hover:opacity-80 transition-opacity\">\n                      {content}\n                    </a>\n                  ) : (\n                    <div key={index}>{content}</div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Social Links */}\n            <div>\n              <h4 className=\"text-lg font-semibold text-foreground mb-4\" data-testid=\"social-links-title\">\n                Connect on Social\n              </h4>\n              <div className=\"flex space-x-4\">\n                {socialLinks.map((social, index) => {\n                  const IconComponent = social.icon;\n                  return (\n                    <a \n                      key={index}\n                      href={social.href}\n                      className={`w-12 h-12 text-white rounded-lg flex items-center justify-center transition-colors ${social.color}`}\n                      data-testid={`social-link-${index}`}\n                    >\n                      <IconComponent size={20} />\n                    </a>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Quick Stats */}\n            <Card className=\"bg-muted/50\">\n              <CardContent className=\"p-6\">\n                <h4 className=\"text-lg font-semibold text-foreground mb-4\" data-testid=\"quick-facts-title\">\n                  Quick Facts\n                </h4>\n                <div className=\"space-y-3 text-sm\">\n                  {quickFacts.map((fact, index) => (\n                    <div key={index} className=\"flex justify-between\" data-testid={`quick-fact-${index}`}>\n                      <span className=\"text-muted-foreground\">{fact.label}</span>\n                      <span className=\"font-medium text-foreground\">{fact.value}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9830},"client/src/components/footer.tsx":{"content":"import { useTheme } from \"./theme-provider\";\nimport { PKLogo } from \"./pk-logo\";\nimport { Mail, Phone, MapPin, Linkedin } from \"lucide-react\";\n\nexport function Footer() {\n  const { theme } = useTheme();\n  \n  return (\n    <footer className={`py-12 border-t theme-transition ${\n      theme === 'professional' \n        ? 'bg-gray-50 border-gray-200' \n        : 'bg-gray-900 border-gray-700'\n    }`}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {/* Logo and tagline */}\n          <div className=\"space-y-4\">\n            <PKLogo size=\"default\" />\n            <p className={`text-sm ${\n              theme === 'professional' ? 'text-gray-600' : 'text-gray-400'\n            }`}>\n              {theme === 'professional' \n                ? 'Transforming medical technology into life-saving success through patient-focused innovation.'\n                : 'Advancing medical innovation through process excellence and organizational efficiency.'\n              }\n            </p>\n          </div>\n          \n          {/* Contact Information */}\n          <div className=\"space-y-4\">\n            <h3 className={`font-semibold text-lg ${\n              theme === 'professional' ? 'text-gray-900' : 'text-white'\n            }`}>\n              Contact Information\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <MapPin className={`h-4 w-4 ${\n                  theme === 'professional' ? 'text-professional-600' : 'text-purple-400'\n                }`} />\n                <span className={`text-sm ${\n                  theme === 'professional' ? 'text-gray-600' : 'text-gray-300'\n                }`}>\n                  Bloomington, Indiana\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Mail className={`h-4 w-4 ${\n                  theme === 'professional' ? 'text-professional-600' : 'text-purple-400'\n                }`} />\n                <a \n                  href=\"mailto:contact@pkoduri.com\"\n                  className={`text-sm hover:underline ${\n                    theme === 'professional' ? 'text-gray-600 hover:text-professional-600' : 'text-gray-300 hover:text-purple-400'\n                  }`}\n                >\n                  contact@pkoduri.com\n                </a>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Linkedin className={`h-4 w-4 ${\n                  theme === 'professional' ? 'text-professional-600' : 'text-purple-400'\n                }`} />\n                <a \n                  href=\"https://linkedin.com/in/pkoduri\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className={`text-sm hover:underline ${\n                    theme === 'professional' ? 'text-gray-600 hover:text-professional-600' : 'text-gray-300 hover:text-purple-400'\n                  }`}\n                >\n                  linkedin.com/in/pkoduri\n                </a>\n              </div>\n            </div>\n          </div>\n          \n          {/* Professional Summary */}\n          <div className=\"space-y-4\">\n            <h3 className={`font-semibold text-lg ${\n              theme === 'professional' ? 'text-gray-900' : 'text-white'\n            }`}>\n              Professional Focus\n            </h3>\n            <div className=\"space-y-2\">\n              <div className={`text-sm ${\n                theme === 'professional' ? 'text-gray-600' : 'text-gray-300'\n              }`}>\n                • Medical Device Marketing\n              </div>\n              <div className={`text-sm ${\n                theme === 'professional' ? 'text-gray-600' : 'text-gray-300'\n              }`}>\n                • Strategic Product Launch\n              </div>\n              <div className={`text-sm ${\n                theme === 'professional' ? 'text-gray-600' : 'text-gray-300'\n              }`}>\n                • Global Market Development\n              </div>\n              <div className={`text-sm ${\n                theme === 'professional' ? 'text-gray-600' : 'text-gray-300'\n              }`}>\n                • Innovation Process Optimization\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className={`mt-8 pt-8 border-t text-center ${\n          theme === 'professional' ? 'border-gray-200' : 'border-gray-700'\n        }`}>\n          <p className={`text-sm ${\n            theme === 'professional' ? 'text-gray-500' : 'text-gray-400'\n          }`}>\n            © {new Date().getFullYear()} P.K. Koduri. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":4769},"client/src/components/hero-section.tsx":{"content":"import { useTheme } from \"./theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download } from \"lucide-react\";\n\ninterface HeroSectionProps {\n  onDownloadResume: () => void;\n  onViewCaseStudies: () => void;\n}\n\nexport function HeroSection({ onDownloadResume, onViewCaseStudies }: HeroSectionProps) {\n  const { theme } = useTheme();\n\n  const themeContent = {\n    professional: {\n      badge: \"Patient-Focused Innovation Leader\",\n      title: \"Breakthrough medical technologies should reach every patient who needs them\",\n      subtitle: \"Most medical innovations fail not because of the science, but because of the strategy. I architect the bridge between life-saving discoveries and the patients whose lives depend on them.\",\n      background: \"bg-gradient-to-br from-professional-50 to-white\"\n    },\n    disruptor: {\n      badge: \"AI Innovation Pioneer & Digital Transformation Leader\",\n      title: \"Revolutionizing Medical Device Marketing with AI Innovation\", \n      subtitle: \"Digital Frontier Award recipient pioneering enterprise AI adoption. Leading AI transformation across marketing workflows while accelerating medical innovation delivery to patients worldwide.\",\n      background: \"bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900\"\n    }\n  };\n\n  const content = themeContent[theme];\n\n  return (\n    <section className={`pt-16 pb-12 theme-transition ${content.background} min-h-screen flex items-center`} id=\"hero\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 w-full\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <div className=\"animate-slide-up\">\n            <div className=\"flex justify-center mb-4\">\n              <Badge \n                variant=\"secondary\" \n                className={`${theme === 'professional' ? 'bg-professional-100 text-professional-700' : 'bg-disruptor-100 text-disruptor-700'}`}\n                data-testid=\"hero-badge\"\n              >\n                {content.badge}\n              </Badge>\n            </div>\n            <h1 className={`text-4xl md:text-5xl lg:text-6xl font-bold mb-4 ${theme === 'professional' ? 'text-gray-900' : 'text-white'}`} data-testid=\"hero-title\">\n              {content.title}\n            </h1>\n            <p className={`text-lg md:text-xl mb-8 max-w-3xl mx-auto ${theme === 'professional' ? 'text-gray-600' : 'text-gray-200'}`} data-testid=\"hero-subtitle\">\n              {content.subtitle}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <Button \n                size=\"lg\"\n                onClick={onViewCaseStudies}\n                className={`${theme === 'professional' ? 'bg-professional-600 hover:bg-professional-700' : 'bg-disruptor-600 hover:bg-disruptor-700'} text-white font-medium px-8 py-3`}\n                data-testid=\"view-case-studies-button\"\n              >\n                View Case Studies\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                onClick={onDownloadResume}\n                className=\"font-medium px-8 py-3\"\n                data-testid=\"download-resume-button\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Resume\n              </Button>\n            </div>\n\n            {/* Key Stats Above the Fold */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 text-center animate-fade-in\">\n              {theme === 'professional' ? (\n                <>\n                  <div data-testid=\"hero-stat-0\">\n                    <div className=\"text-xl md:text-2xl font-bold text-professional-600 mb-1\">15+</div>\n                    <div className=\"text-xs md:text-sm text-gray-600\">Years Patient-Focused Innovation</div>\n                  </div>\n                  <div data-testid=\"hero-stat-1\">\n                    <div className=\"text-xl md:text-2xl font-bold text-professional-600 mb-1\">$250M+</div>\n                    <div className=\"text-xs md:text-sm text-gray-600\">Portfolio Impact on Patient Care</div>\n                  </div>\n                  <div data-testid=\"hero-stat-2\">\n                    <div className=\"text-xl md:text-2xl font-bold text-professional-600 mb-1\">95.5%</div>\n                    <div className=\"text-xs md:text-sm text-gray-600\">Clinical Success Rates Achieved</div>\n                  </div>\n                  <div data-testid=\"hero-stat-3\">\n                    <div className=\"text-xl md:text-2xl font-bold text-professional-600 mb-1\">Global</div>\n                    <div className=\"text-xs md:text-sm text-gray-600\">Patient Access Expansion</div>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div data-testid=\"hero-stat-0\">\n                    <div className=\"text-xl md:text-2xl font-bold text-cyan-400 mb-1\">Award</div>\n                    <div className=\"text-xs md:text-sm text-gray-100\">Digital Frontier AI Leadership</div>\n                  </div>\n                  <div data-testid=\"hero-stat-1\">\n                    <div className=\"text-xl md:text-2xl font-bold text-cyan-400 mb-1\">$250M+</div>\n                    <div className=\"text-xs md:text-sm text-gray-100\">Portfolio Disruption Impact</div>\n                  </div>\n                  <div data-testid=\"hero-stat-2\">\n                    <div className=\"text-xl md:text-2xl font-bold text-cyan-400 mb-1\">18x</div>\n                    <div className=\"text-xs md:text-sm text-gray-100\">Faster AI-Powered Workflows</div>\n                  </div>\n                  <div data-testid=\"hero-stat-3\">\n                    <div className=\"text-xl md:text-2xl font-bold text-cyan-400 mb-1\">Enterprise</div>\n                    <div className=\"text-xs md:text-sm text-gray-100\">AI Adoption Pioneer</div>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6003},"client/src/components/logo-showcase.tsx":{"content":"import { useTheme } from \"./theme-provider\";\nimport { PKLogo, PKLogoStacked, PKLogoMinimal } from \"./pk-logo\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport function LogoShowcase() {\n  const { theme } = useTheme();\n  \n  return (\n    <section className=\"py-20 theme-transition\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-6\">\n            P.K. Koduri Logo Variations\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Modern, text-based logo treatments designed for professional versatility across all brand applications.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {/* Primary Horizontal Logo */}\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"mb-6\">\n                <PKLogo size=\"large\" />\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2 text-foreground\">Primary Logo</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Main horizontal treatment for headers, business cards, and primary brand applications.\n              </p>\n              <div className=\"mt-4 space-y-2\">\n                <div className=\"flex justify-center\">\n                  <PKLogo size=\"default\" />\n                </div>\n                <div className=\"flex justify-center\">\n                  <PKLogo size=\"small\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Stacked Logo */}\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"mb-6\">\n                <PKLogoStacked size=\"large\" />\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2 text-foreground\">Stacked Logo</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Vertical treatment for social media profiles, app icons, and square format applications.\n              </p>\n              <div className=\"mt-4 space-y-4\">\n                <div className=\"flex justify-center\">\n                  <PKLogoStacked size=\"default\" />\n                </div>\n                <div className=\"flex justify-center\">\n                  <PKLogoStacked size=\"small\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Minimal Logo */}\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"mb-6 flex justify-center\">\n                <PKLogoMinimal className=\"w-16 h-16 text-xl\" />\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2 text-foreground\">Minimal Mark</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Compact circular treatment for favicons, avatar images, and small-scale applications.\n              </p>\n              <div className=\"mt-4 flex justify-center space-x-4\">\n                <PKLogoMinimal className=\"w-12 h-12\" />\n                <PKLogoMinimal className=\"w-8 h-8 text-sm\" />\n                <PKLogoMinimal className=\"w-6 h-6 text-xs\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Theme Demonstration */}\n        <div className=\"mt-16\">\n          <h3 className=\"text-2xl font-bold text-center mb-8 text-foreground\">\n            Theme-Adaptive Design\n          </h3>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Professional Theme Demo */}\n            <Card className=\"bg-gradient-to-br from-white to-blue-50 border-2 border-professional-200\">\n              <CardContent className=\"p-8 text-center\">\n                <h4 className=\"font-semibold text-lg mb-4 text-gray-900\">Professional Theme</h4>\n                <div className=\"space-y-6\">\n                  <div className=\"text-2xl font-bold tracking-tight\">\n                    <span className=\"text-professional-600\">P.K.</span>\n                    <span className=\"ml-1 text-gray-800\">KODURI</span>\n                  </div>\n                  <div className=\"text-center font-bold tracking-tight\">\n                    <div className=\"text-4xl leading-none text-professional-600\">P.K.</div>\n                    <div className=\"text-sm leading-tight tracking-widest text-gray-600\">KODURI</div>\n                  </div>\n                  <div className=\"w-12 h-12 bg-professional-600 rounded-full flex items-center justify-center font-bold text-white mx-auto\">\n                    PK\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-600 mt-4\">\n                  Clean, professional blue treatment emphasizing trust and medical expertise.\n                </p>\n              </CardContent>\n            </Card>\n            \n            {/* Innovation Theme Demo */}\n            <Card className=\"bg-gradient-to-br from-gray-800 to-gray-700\">\n              <CardContent className=\"p-8 text-center\">\n                <h4 className=\"font-semibold text-lg mb-4 text-white\">Innovation Catalyst Theme</h4>\n                <div className=\"space-y-6\">\n                  <div className=\"text-2xl font-bold tracking-tight\">\n                    <span className=\"text-transparent bg-gradient-to-r from-purple-400 via-pink-400 to-cyan-400 bg-clip-text\">P.K.</span>\n                    <span className=\"ml-1 text-white\">KODURI</span>\n                  </div>\n                  <div className=\"text-center font-bold tracking-tight\">\n                    <div className=\"text-4xl leading-none text-transparent bg-gradient-to-r from-purple-400 via-pink-400 to-cyan-400 bg-clip-text\">P.K.</div>\n                    <div className=\"text-sm leading-tight tracking-widest text-gray-300\">KODURI</div>\n                  </div>\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center font-bold text-white mx-auto\">\n                    PK\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-300 mt-4\">\n                  Dynamic gradient treatment reflecting innovation and forward-thinking leadership.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6523},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { useTheme } from \"./theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, Palette } from \"lucide-react\";\nimport { PKLogo } from \"./pk-logo\";\n\ninterface NavigationProps {\n  onThemeToggle?: () => void;\n}\n\nexport function Navigation({ onThemeToggle }: NavigationProps) {\n  const { theme, setTheme } = useTheme();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"professional\" ? \"disruptor\" : \"professional\";\n    setTheme(newTheme);\n    onThemeToggle?.();\n  };\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <nav className={`fixed top-0 w-full z-50 backdrop-blur-sm border-b theme-transition ${\n      theme === 'professional' \n        ? 'bg-white/95 border-gray-200' \n        : 'bg-gray-900/95 border-gray-700'\n    }`}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center min-w-0 flex-1\">\n            <div className=\"flex items-center\">\n              <span className=\"text-lg font-bold text-blue-600\">P.K.</span>\n              <span className={`text-lg font-bold ml-1 ${theme === 'professional' ? 'text-gray-900' : 'text-white'}`}>KODURI</span>\n            </div>\n            <span className={`ml-3 text-sm hidden sm:inline font-medium ${theme === 'professional' ? 'text-gray-600' : 'text-gray-300'}`}>\n              {theme === 'professional' ? 'Patient-Focused Innovation Leader' : 'Innovation Catalyst'}\n            </span>\n          </div>\n          \n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-4\">\n              <button \n                onClick={() => scrollToSection('about')}\n                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600' \n                    : 'text-gray-300 hover:text-disruptor-400'\n                }`}\n                data-testid=\"nav-about\"\n              >\n                About\n              </button>\n              <button \n                onClick={() => scrollToSection('achievements')}\n                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600' \n                    : 'text-gray-300 hover:text-disruptor-400'\n                }`}\n                data-testid=\"nav-achievements\"\n              >\n                Achievements\n              </button>\n              <button \n                onClick={() => scrollToSection('portfolio')}\n                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600' \n                    : 'text-gray-300 hover:text-disruptor-400'\n                }`}\n                data-testid=\"nav-portfolio\"\n              >\n                Portfolio\n              </button>\n              <button \n                onClick={() => scrollToSection('contact')}\n                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600' \n                    : 'text-gray-300 hover:text-disruptor-400'\n                }`}\n                data-testid=\"nav-contact\"\n              >\n                Contact\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              className={`hidden lg:flex ${\n                theme === 'professional' \n                  ? 'text-gray-600 hover:text-professional-600 hover:bg-professional-50' \n                  : 'text-gray-300 hover:text-disruptor-400 hover:bg-gray-800'\n              }`}\n              data-testid=\"theme-toggle\"\n            >\n              <Palette className=\"h-4 w-4\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              className={`md:hidden ${\n                theme === 'professional' \n                  ? 'text-gray-600 hover:text-professional-600 hover:bg-professional-50' \n                  : 'text-gray-300 hover:text-white hover:bg-gray-800'\n              }`}\n              data-testid=\"mobile-menu-toggle\"\n            >\n              <Menu className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n              <button \n                onClick={() => scrollToSection('about')}\n                className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600' \n                    : 'text-gray-300 hover:text-disruptor-400'\n                }`}\n                data-testid=\"mobile-nav-about\"\n              >\n                About\n              </button>\n              <button \n                onClick={() => scrollToSection('achievements')}\n                className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600' \n                    : 'text-gray-300 hover:text-disruptor-400'\n                }`}\n                data-testid=\"mobile-nav-achievements\"\n              >\n                Achievements\n              </button>\n              <button \n                onClick={() => scrollToSection('portfolio')}\n                className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600' \n                    : 'text-gray-300 hover:text-disruptor-400'\n                }`}\n                data-testid=\"mobile-nav-portfolio\"\n              >\n                Portfolio\n              </button>\n              <button \n                onClick={() => scrollToSection('contact')}\n                className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600' \n                    : 'text-gray-300 hover:text-disruptor-400'\n                }`}\n                data-testid=\"mobile-nav-contact\"\n              >\n                Contact\n              </button>\n              <Button\n                variant=\"ghost\"\n                onClick={toggleTheme}\n                className={`w-full justify-start lg:hidden ${\n                  theme === 'professional' \n                    ? 'text-gray-600 hover:text-professional-600 hover:bg-professional-50' \n                    : 'text-gray-300 hover:text-disruptor-400 hover:bg-gray-800'\n                }`}\n                data-testid=\"mobile-theme-toggle\"\n              >\n                <Palette className=\"h-4 w-4 mr-2\" />\n                Switch Theme\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":7728},"client/src/components/pk-logo.tsx":{"content":"import { useTheme } from \"./theme-provider\";\n\nexport function PKLogo({ size = \"default\", className = \"\" }: { size?: \"small\" | \"default\" | \"large\", className?: string }) {\n  const sizeClasses = {\n    small: \"text-xl\",\n    default: \"text-2xl md:text-3xl\",\n    large: \"text-3xl md:text-4xl lg:text-5xl\"\n  };\n\n  return (\n    <div className={`font-bold tracking-tight ${sizeClasses[size]} ${className}`} data-testid=\"pk-logo\">\n      <span className=\"text-blue-600\">\n        P.K.\n      </span>\n      <span className=\"ml-1 text-gray-900\">\n        KODURI\n      </span>\n    </div>\n  );\n}\n\nexport function PKLogoStacked({ size = \"default\", className = \"\" }: { size?: \"small\" | \"default\" | \"large\", className?: string }) {\n  const { theme } = useTheme();\n  \n  const sizeClasses = {\n    small: { initials: \"text-3xl\", name: \"text-xs\" },\n    default: { initials: \"text-4xl md:text-5xl\", name: \"text-sm md:text-base\" },\n    large: { initials: \"text-4xl md:text-5xl lg:text-6xl\", name: \"text-sm md:text-base lg:text-lg\" }\n  };\n\n  return (\n    <div className={`text-center font-bold tracking-tight ${className}`} data-testid=\"pk-logo-stacked\">\n      <div className={`leading-none ${sizeClasses[size].initials} ${\n        theme === 'professional' \n          ? 'text-blue-600' \n          : 'text-transparent bg-gradient-to-r from-purple-400 via-pink-400 to-cyan-400 bg-clip-text'\n      }`}>\n        P.K.\n      </div>\n      <div className={`leading-tight tracking-widest ${sizeClasses[size].name} ${\n        theme === 'professional' \n          ? 'text-gray-700' \n          : 'text-gray-300'\n      }`}>\n        KODURI\n      </div>\n    </div>\n  );\n}\n\nexport function PKLogoMinimal({ className = \"\" }: { className?: string }) {\n  const { theme } = useTheme();\n  \n  return (\n    <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg ${\n      theme === 'professional' \n        ? 'bg-blue-600 text-white' \n        : 'bg-gradient-to-br from-purple-500 to-pink-500 text-white'\n    } ${className}`} data-testid=\"pk-logo-minimal\">\n      PK\n    </div>\n  );\n}","size_bytes":2065},"client/src/components/portfolio-section.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Download, FileText, BarChart3, Lightbulb } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\n\ninterface PortfolioSectionProps {\n  onDownloadResource: (type: string) => void;\n}\n\nexport function PortfolioSection({ onDownloadResource }: PortfolioSectionProps) {\n  const { theme } = useTheme();\n\n  const caseStudies = theme === 'professional' ? [\n    {\n      badge: \"Implementation Deep-Dive\",\n      title: \"Clinical Data Management: Fenestrated Program Database Architecture\",\n      description: \"Architected comprehensive case management system tracking every fenestrated procedure from initial planning to patient outcomes. Integrated physician certification status, order processing workflows, and real-time performance metrics, creating scalable foundation for clinical program expansion still operational today.\",\n      metrics: [\"End-to-End Case Tracking\", \"Real-Time Analytics\", \"Scalable Architecture\"]\n    },\n    {\n      badge: \"Global Expansion Strategy\",\n      title: \"Strategic Market Analysis: EVAR Center Opportunity Mapping\", \n      description: \"Developed systematic approach for identifying high-volume EVAR centers across multiple markets. Created data-driven opportunity mapping methodology that enabled targeted expansion of complex aneurysm treatment access, resulting in strategic market penetration framework adopted company-wide.\",\n      metrics: [\"Data-Driven Targeting\", \"Strategic Framework\", \"Market Intelligence\"]\n    },\n    {\n      badge: \"Training Innovation\",\n      title: \"Physician Workshop Methodology: Accelerated Competency Model\",\n      description: \"Designed intensive 2-day workshop format that compressed months of traditional training into focused competency development. Recruited leading vascular surgeons as proctors and established certification pathways that became industry standard for complex device education.\",\n      metrics: [\"Accelerated Learning\", \"Industry Standards\", \"Competency Certification\"]\n    }\n  ] : [\n    {\n      badge: \"Workflow Transformation\",\n      title: \"Content Generation Revolution: From Hours to Minutes\",\n      description: \"Pioneered systematic approach to AI-powered content creation, transforming marketing workflows from multi-hour manual processes to AI-assisted rapid development. Established quality control frameworks ensuring accuracy while achieving 18x speed improvements in campaign material production.\",\n      metrics: [\"18x Speed Improvement\", \"Quality Frameworks\", \"Process Innovation\"]\n    },\n    {\n      badge: \"Custom Solution Development\", \n      title: \"Emma AI Architecture: Persona-Driven Marketing Engine\",\n      description: \"Engineered custom AI assistant using Microsoft Copilot Studio, designing persona-specific content generation capabilities. Built intelligent system capable of adapting messaging for distinct healthcare buyer personas with consistent brand voice.\",\n      metrics: [\"Custom AI Engineering\", \"Persona Intelligence\", \"Brand Consistency\"]\n    },\n    {\n      badge: \"Enterprise Strategy Implementation\",\n      title: \"AI Adoption Framework: From Pilot to Organization-Wide Deployment\",\n      description: \"Developed comprehensive change management approach for enterprise AI adoption, bridging technical capabilities with practical business applications. Created training methodologies, feedback loops, and success metrics that enabled organization-wide AI transformation at Cook Medical.\",\n      metrics: [\"Change Management\", \"Training Systems\", \"Organizational Impact\"]\n    }\n  ];\n\n  const resources = [\n    {\n      icon: FileText,\n      title: \"Executive Resume\",\n      description: \"Complete track record of breakthrough achievements\",\n      color: \"text-red-600 bg-red-100\",\n      type: \"resume\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Impact Metrics Report\",\n      description: \"Quantified results: $250M+ impact, 95.5% success rates\",\n      color: \"text-blue-600 bg-blue-100\",\n      type: \"metrics\"\n    },\n    {\n      icon: Lightbulb,\n      title: \"Speed Innovation Playbook\",\n      description: \"Silicon Valley methodology for medical devices\",\n      color: \"text-green-600 bg-green-100\",\n      type: \"framework\"\n    }\n  ];\n\n  return (\n    <section className=\"py-20 theme-transition\" id=\"portfolio\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-6\" data-testid=\"portfolio-title\">\n            Implementation Case Studies\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"portfolio-subtitle\">\n            Deep-dive analysis of methodologies, frameworks, and systematic approaches that drive measurable results.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          {caseStudies.map((study, index) => (\n            <Card key={index} className=\"card-hover\" data-testid={`case-study-${index}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <Badge \n                    variant=\"secondary\"\n                    className={index === 0 ? \"bg-professional-100 text-professional-700\" : \n                               index === 1 ? \"bg-blue-100 text-blue-700\" :\n                               \"bg-green-100 text-green-700\"}\n                  >\n                    {study.badge}\n                  </Badge>\n                </div>\n                <h3 className=\"text-xl font-bold text-foreground mb-3\">\n                  {study.title}\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {study.description}\n                </p>\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {study.metrics.map((metric, metricIndex) => (\n                    <Badge key={metricIndex} variant=\"outline\" className=\"text-xs\">\n                      {metric}\n                    </Badge>\n                  ))}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Based on actual Cook Medical achievements\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Downloadable Resources */}\n        <div>\n          <h3 className=\"text-2xl font-bold text-foreground mb-8 text-center\" data-testid=\"resources-title\">\n            Downloadable Resources\n          </h3>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {resources.map((resource, index) => {\n              const IconComponent = resource.icon;\n              return (\n                <Card key={index} className=\"card-hover\" data-testid={`resource-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className={`w-12 h-12 rounded-lg flex items-center justify-center mr-4 ${resource.color}`}>\n                        <IconComponent size={24} />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-foreground\">{resource.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{resource.description}</p>\n                      </div>\n                    </div>\n                    <Button \n                      variant=\"secondary\" \n                      className=\"w-full\"\n                      onClick={() => onDownloadResource(resource.type)}\n                      data-testid={`download-${resource.type}`}\n                    >\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Download PDF\n                    </Button>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8055},"client/src/components/stats-section.tsx":{"content":"import { useTheme } from \"./theme-provider\";\n\nexport function StatsSection() {\n  const { theme } = useTheme();\n  \n  const stats = theme === 'professional' ? [\n    { value: \"15+\", label: \"Years Patient-Focused Innovation\" },\n    { value: \"$250M+\", label: \"Portfolio Impact on Patient Care\" },\n    { value: \"95.5%\", label: \"Clinical Success Rates Achieved\" },\n    { value: \"Global\", label: \"Patient Access Expansion\" }\n  ] : [\n    { value: \"Award\", label: \"Digital Frontier AI Leadership\" },\n    { value: \"$250M+\", label: \"Portfolio Disruption Impact\" },\n    { value: \"18x\", label: \"Faster AI-Powered Workflows\" },\n    { value: \"Enterprise\", label: \"AI Adoption Pioneer\" }\n  ];\n\n  return (\n    <section className=\"py-16 bg-muted/50 theme-transition\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 text-center\">\n          {stats.map((stat, index) => (\n            <div key={index} className=\"animate-fade-in\" data-testid={`stat-${index}`}>\n              <div className=\"text-3xl md:text-4xl font-bold text-primary mb-2\">\n                {stat.value}\n              </div>\n              <div className=\"text-muted-foreground\">{stat.label}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1302},"client/src/components/testimonials-section.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Star } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function TestimonialsSection() {\n  const { theme } = useTheme();\n\n  const achievements = theme === 'professional' ? [\n    {\n      title: \"Zenith Fenestrated Program Excellence\",\n      metric: \"95.5% Freedom from Mortality\",\n      description: \"Built comprehensive training ecosystem with 2-day physician workshops and proctor programs for the first FDA-approved fenestrated endograft. Over 90 accounts trained in Phase I with 30% year-over-year EVAR growth.\"\n    },\n    {\n      title: \"Global Patient Access Expansion\",\n      metric: \"High Single-Digit Market Growth\",\n      description: \"Extended fenestrated EVAR therapy globally across Europe, Canada, and Asia-Pacific. Captured significant market share gains in complex AAA segment, making life-saving therapy accessible to thousands of patients worldwide.\"\n    },\n    {\n      title: \"Clinical Training Infrastructure\",\n      metric: \"Custom CRM System Built\",\n      description: \"Developed Quickbase CRM system to track every fenestrated case from initial plan to implant. Monitored physician training status, order lead times, and outcomes to ensure only certified physicians received grafts.\"\n    }\n  ] : [\n    {\n      title: \"TeslaTome Strategy Development\",\n      metric: \"Go-to-Market Framework\",\n      description: \"Led multiple design sprints developing comprehensive go-to-market strategy for breakthrough ERCP technology. Orchestrated cross-functional teams using agile methodology while coordinating marketing claims strategy for US, Japan, and EU regulatory pathways.\"\n    },\n    {\n      title: \"Design Sprint Innovation\", \n      metric: \"5-Day Development Cycles\",\n      description: \"Introduced modern design sprint methodology to medical device marketing, adapting 5-day intensive workshops for corporate culture. Created agile deployment teams that efficiently transition between high-priority projects without waiting for annual planning cycles.\"\n    },\n    {\n      title: \"NEST-VT Brand Enhancement\",\n      metric: \"Reproductive Health Innovation\", \n      description: \"Enhanced women's health product branding through creative sprints, developing new messaging and visual identity for oocyte cryopreservation success. Re-engaged sales teams around previously under-marketed reproductive medicine technology.\"\n    }\n  ];\n\n  return (\n    <section className=\"py-20 bg-muted/50 theme-transition\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-6\" data-testid=\"testimonials-title\">\n            Key Achievements & Results\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"testimonials-subtitle\">\n            Quantifiable outcomes from P.K. Koduri's strategic marketing leadership at Cook Medical.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {achievements.map((achievement, index) => (\n            <Card key={index} className=\"card-hover\" data-testid={`achievement-card-${index}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"flex text-primary\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} className=\"h-4 w-4 fill-current\" />\n                    ))}\n                  </div>\n                </div>\n                <div className=\"mb-4\">\n                  <div className=\"text-2xl font-bold text-primary mb-2\">{achievement.metric}</div>\n                  <h3 className=\"font-semibold text-foreground text-lg\">{achievement.title}</h3>\n                </div>\n                <p className=\"text-muted-foreground text-sm\">\n                  {achievement.description}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4068},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"professional\" | \"disruptor\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"professional\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"professional\",\n  storageKey = \"portfolio-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"professional\", \"disruptor\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1410},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Stethoscope, Rocket, CheckCircle, Zap } from \"lucide-react\";\nimport { PKLogo } from \"../components/pk-logo\";\n\ninterface HomeProps {\n  onThemeSelection: (theme: \"professional\" | \"disruptor\") => void;\n}\n\nexport default function Home({ onThemeSelection }: HomeProps) {\n  const { setTheme } = useTheme();\n\n  const handleThemeChoice = (selectedTheme: \"professional\" | \"disruptor\") => {\n    setTheme(selectedTheme);\n    onThemeSelection(selectedTheme);\n  };\n\n  return (\n    <section className=\"pt-16 min-h-screen bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 flex items-center justify-center\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center mb-8 animate-fade-in\">\n          <div className=\"mb-6 overflow-visible\">\n            <PKLogo size=\"default\" className=\"mx-auto\" />\n          </div>\n          <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n            Choose Your Leadership Journey\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-3xl mx-auto\">\n            Two leadership styles, one exceptional professional. Which resonates with your approach to medical device innovation?\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n          {/* Professional Theme Card */}\n          <Card \n            className=\"card-hover cursor-pointer border-2 hover:border-professional-500 hover:shadow-2xl transform hover:scale-105 transition-all duration-300 bg-white border-professional-200\"\n            onClick={() => handleThemeChoice(\"professional\")}\n            data-testid=\"professional-choice\"\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-professional-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Stethoscope className=\"text-professional-600\" size={24} />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">The Patient-Focused Leader</h3>\n              <p className=\"text-gray-800 mb-4 font-medium text-sm\">\n                The methodical strategist who believes breakthrough medical technologies should reach every patient who needs them.\n              </p>\n              <div className=\"space-y-2 text-xs\">\n                <div className=\"flex items-center justify-start\">\n                  <CheckCircle className=\"text-professional-600 mr-2 flex-shrink-0\" size={14} />\n                  <span className=\"text-gray-800 font-medium\">Patient-centered mission</span>\n                </div>\n                <div className=\"flex items-center justify-start\">\n                  <CheckCircle className=\"text-professional-600 mr-2 flex-shrink-0\" size={14} />\n                  <span className=\"text-gray-800 font-medium\">Proven methodology & systems</span>\n                </div>\n                <div className=\"flex items-center justify-start\">\n                  <CheckCircle className=\"text-professional-600 mr-2 flex-shrink-0\" size={14} />\n                  <span className=\"text-gray-800 font-medium\">95.5% clinical success rates</span>\n                </div>\n                <div className=\"flex items-center justify-start\">\n                  <CheckCircle className=\"text-professional-600 mr-2 flex-shrink-0\" size={14} />\n                  <span className=\"text-gray-800 font-medium\">Global market expansion</span>\n                </div>\n              </div>\n              <Button \n                className=\"mt-6 w-full font-semibold py-3 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 bg-professional-600 hover:bg-professional-700 text-white\"\n                data-testid=\"professional-button\"\n              >\n                Meet Professional P.K.\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Disruptor Theme Card */}\n          <Card \n            className=\"card-hover cursor-pointer bg-gradient-to-br from-gray-900 to-gray-800 text-white border-2 hover:border-disruptor-500 hover:shadow-2xl transform hover:scale-105 transition-all duration-300\"\n            onClick={() => handleThemeChoice(\"disruptor\")}\n            data-testid=\"disruptor-choice\"\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-disruptor-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Rocket className=\"text-disruptor-400\" size={24} />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3 text-white\">The Innovation Catalyst</h3>\n              <p className=\"text-gray-200 mb-4 text-sm\">\n                The AI pioneer who transforms traditional marketing workflows through technology innovation and strategic process optimization.\n              </p>\n              <div className=\"space-y-2 text-xs text-gray-300\">\n                <div className=\"flex items-center justify-start\">\n                  <Zap className=\"text-disruptor-400 mr-2 flex-shrink-0\" size={14} />\n                  <span className=\"text-gray-200\">Digital Frontier Award recipient</span>\n                </div>\n                <div className=\"flex items-center justify-start\">\n                  <Zap className=\"text-disruptor-400 mr-2 flex-shrink-0\" size={14} />\n                  <span className=\"text-gray-200\">Enterprise AI transformation leader</span>\n                </div>\n                <div className=\"flex items-center justify-start\">\n                  <Zap className=\"text-disruptor-400 mr-2 flex-shrink-0\" size={14} />\n                  <span className=\"text-gray-200\">18x faster AI-powered workflows</span>\n                </div>\n                <div className=\"flex items-center justify-start\">\n                  <Zap className=\"text-disruptor-400 mr-2 flex-shrink-0\" size={14} />\n                  <span className=\"text-gray-200\">Custom AI assistant architect</span>\n                </div>\n              </div>\n              <Button \n                className=\"mt-6 w-full font-semibold py-3 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 bg-disruptor-500 hover:bg-disruptor-600 text-white border-0\"\n                data-testid=\"disruptor-button\"\n              >\n                Meet AI Pioneer P.K.\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center mt-8\">\n          <div className=\"mb-4\">\n            <p className=\"text-base font-medium text-gray-900 mb-1\">Can't decide?</p>\n            <p className=\"text-gray-600 mb-3 text-sm\">Both paths showcase the same achievements through different perspectives</p>\n          </div>\n          <button \n            onClick={() => handleThemeChoice(\"professional\")}\n            className=\"text-gray-600 hover:text-professional-600 text-sm underline font-medium px-4 py-2 rounded-lg hover:bg-gray-100 transition-colors\"\n            data-testid=\"skip-theme-selector\"\n          >\n            View Complete Portfolio →\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7294},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/portfolio.tsx":{"content":"import { useState } from \"react\";\nimport { Navigation } from \"@/components/navigation\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { StatsSection } from \"@/components/stats-section\";\nimport { AboutSection } from \"@/components/about-section\";\nimport { AchievementsTimeline } from \"@/components/achievements-timeline\";\nimport { PortfolioSection } from \"@/components/portfolio-section\";\nimport { TestimonialsSection } from \"@/components/testimonials-section\";\nimport { ContactSection } from \"@/components/contact-section\";\nimport { Footer } from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PortfolioProps {\n  onBackToHome?: () => void;\n}\n\nexport default function Portfolio({ onBackToHome }: PortfolioProps) {\n  const { toast } = useToast();\n\n  const downloadMutation = useMutation({\n    mutationFn: async (type: string) => {\n      const response = await apiRequest(\"GET\", `/api/resume?type=${type}`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Download initiated\",\n        description: data.message || \"Your download should begin shortly.\"\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Download failed\",\n        description: \"Please try again later.\"\n      });\n    }\n  });\n\n  const handleDownloadResume = () => {\n    downloadMutation.mutate(\"resume\");\n  };\n\n  const handleDownloadResource = (type: string) => {\n    downloadMutation.mutate(type);\n  };\n\n  const handleViewCaseStudies = () => {\n    const portfolioSection = document.getElementById('portfolio');\n    if (portfolioSection) {\n      portfolioSection.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Back to themes button */}\n      {onBackToHome && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onBackToHome}\n          className=\"fixed top-20 left-4 z-40 bg-background shadow-lg border\"\n          data-testid=\"back-to-themes\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Themes\n        </Button>\n      )}\n\n      <HeroSection \n        onDownloadResume={handleDownloadResume}\n        onViewCaseStudies={handleViewCaseStudies}\n      />\n\n      <AboutSection />\n      <AchievementsTimeline />\n      <PortfolioSection onDownloadResource={handleDownloadResource} />\n      <TestimonialsSection />\n      <ContactSection />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2717},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}